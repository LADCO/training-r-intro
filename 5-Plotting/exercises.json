[
    {
        "exercise": "1. Plot the correlation between temperature and ozone. Use the `plot()` function with `chicago_air$temp` as `x` and `chicago_air$ozone` as `y`.",
        "solution": "plot(chicago_air$temp, chicago_air$ozone)",
        "output": "",
        "explanation": "This will create a scatter plot of the correlation between temperature and ozone in the `chicago_air` data frame."
    },
    {
        "exercise": "2. Convert the `date` column in the `chicago_air` data frame from a string to a `Date` object then print the first 5 rows. Use `as.Date()` for conversion.",
        "solution": "chicago_air$date <- as.Date(chicago_air$date)\nhead(chicago_air)",
        "output": "",
        "hint": "Use the `head()` function to print the first few rows of a data frame."
    },
    {
        "exercise": "3. Plot ozone levels over time (date on the x-axis, ozone on the y-axis). Use `type = 'l'` to create a line plot.",
        "solution": "plot(chicago_air$date, chicago_air$ozone, type = 'l')",
        "output": "",
        "explanation": "This line plot will display ozone levels over time."
    },
    {
        "exercise": "4. Create a grid layout with two plots: One for the ozone data and another for the temperature data. Use the `par()` function with `mfrow = c(1,2)`.",
        "solution": "par(mfrow = c(1,2))\nplot(chicago_air$date, chicago_air$ozone, type='l')\nplot(chicago_air$date, chicago_air$temp, type='l')",
        "output": "",
        "explanation": "This will create a grid of two plots: one displaying ozone levels over time and the other displaying temperature over time."
    },
    {
        "exercise": "5. Convert the `date` column in `chicago_air` data frame to factors representing the day of the week using `factor()` and `weekdays()`. Then print the first 10 rows.",
        "solution": "chicago_air$weekday <- factor(weekdays(chicago_air$date, abbreviate = TRUE))\nhead(chicago_air, 10)",
        "output": "",
        "explanation": "This will convert the date to a factor displaying the day of the week and will then print the first 10 rows."
    },
    {
        "exercise": "6. Use `lattice` to create a line plot of ozone values over time. Use `xyplot()`.",
        "solution": "library(lattice)\nxyplot(ozone ~ date, data = chicago_air, type = 'l')",
        "output": "",
        "explanation": "This line plot displays ozone values over time."
    },
    {
        "exercise": "7. Create a `ggplot` line graph of ozone over time. Use `geom_line()` to create the line graph.",
        "solution": "library(ggplot2)\nggplot(chicago_air, aes(x = date, y = ozone)) + geom_line()",
        "output": "",
        "explanation": "This creates a line graph of ozone levels over time."
    },
    {
        "exercise": "8. Reshape the `chicago_air` data frame into a long format. Use the `pivot_longer()` function from `tidyr`. Print the first 5 rows of reshaped data.",
        "solution": "library(tidyr)\nchicago_long <- pivot_longer(chicago_air, cols = c('ozone', 'temp', 'solar'))\nhead(chicago_long)",
        "output": "",
        "hint": "Make sure to use the right column names in the `cols` argument of `pivot_longer` function.",
        "explanation": "This will reshape the data frame so each row is a unique id-variable combination."
    },
    {
        "exercise": "9. Using `ggplot` on the reshaped `chicago_long` data, create a plot with `date` on the x-axis, `value` on the y-axis, and color the points by `high_temp`. Use `geom_point()` to add points to the plots, and `facet_grid()` to create separate panels for each variable.",
        "solution": "ggplot(chicago_long, aes(x = date, y = value, color = high_temp)) + geom_point() + facet_grid(rows = vars(variable))",
        "output": "",
        "explanation": "This creates a plot with date on the x-axis, value on the y-axis, and separate plots (facets) for each variable. Points are colored based on high temperature."
    },
    {
        "exercise": "10. Save the plot you made in the previous question as a PNG file named 'my_plot.png'. Use `ggsave()` to save the plot.",
        "solution": "ggsave(filename = 'my_plot.png')",
        "output": "",
        "explanation": "This will save the last plot that was displayed in Rstudio to a PNG file named 'my_plot.png'."
    }
]